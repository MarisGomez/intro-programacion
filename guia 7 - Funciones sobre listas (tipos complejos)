# EJERCICIO 1.1
def pertenece (lista:list[int], i:int) -> bool:
    for n in lista:
        if n == i:
            return True
        return False

def pertenece2 (lista:list[int], i:int) -> bool:
    n: int = 0
    while n < len(lista):
        if lista[n] == i:
            return True
        n += 1
    return False

def pertenece3 (lista:list[int], i:int) -> bool:
    for n in range (0,len(lista),1):
        if lista[n] == 1:
            return True
    return False

def pertenece_aux (lista:list[int], i:int) -> bool:
    return i in lista

# EJERCICIO 1.2
def divide_a_todos (lista:list[int], n:int) -> bool:
    res:bool = False
    for e in lista:
        if n % e == 0:
            res = True
    return res

# EJERCICIO 1.3
def suma_total (lista:list[int]) -> int:
    res:int = 0
    for n in lista:
        res += n
    return res 

# EJERCICIO 1.4
def maximo (lista:list[int]) -> int:
    res:int = 0
    for e in lista:
        if e > res:
            res = e
    return res

# EJERCICIO 1.5
def minimo (lista:list[int]) -> int:
    res:int = lista[0]
    for e in lista:
        if e < res:
            res = e
    return res

# EJERCICIO 1.6
def ordenar (lista:list[int]) -> bool: #DEVUELVE LA LISTA ORDENADA PERO NO ES LO PEDIDO
    lista_desordenada: list[int] = lista.copy()
    lista_ordenada: list[int] = []
    while lista_ordenada < lista_desordenada:
        lista_ordenada.append(minimo(lista_desordenada))
        lista_desordenada.remove(minimo(lista_desordenada)) # REMOVE NO ESTA ADMITIDO
    return lista_ordenada

def ordenados(Lista:list[int]) -> bool:
    for i in range(len(Lista)-1):
        if (not(Lista[i]<Lista[i+1])):
            return False
    return True

def ordenados2(lista:list[int]) -> bool: # PREGUNTAR
    for i in range(len(lista)-1):
        if lista[i]<lista[i+1]:
            return True
    return False

# EJERCICIO 1.7
def pos_maximo(lista:list[int]) -> int:
    max:int = maximo(lista)
    for i in lista:
        if lista == []:
            return -1
        else:
            return lista[max]

#########################################################################################################
# EJERCICIO 2.1
def ceros_en_posiciones_pares (lista:list[int]):
    for n in range (0,len(lista),2):
        lista[n] = 0

#lista: list[int] = [1,2,3,4]
#ceros_en_posiciones_pares(lista)
#print(lista)

def ceros_en_posiciones_pares2 (lista:list[int]) -> list[int]:
    res: list[int] = []
    i:int = 0
    while i < len(lista):
        if i % 2 == 0:
            res.append(0)
        else:
            res.append(lista[i])
        i += 1
    return res


if __name__ == '__main__':
    #print(pertenece([1,2,3,4],5))
    #print(pertenece2([1,2,3,4],2))
    #print(pertenece3([1,2,3,4],7))
    #print(suma_total([1,2,3,4,5]))
    #print(suma_total([]))
    #print(ceros_en_posiciones_pares2([1,2,3,4,5,6]))
    #print(divide_a_todos([2,4,8],2))
    #print(maximo([3,5,1,4]))
    #print(minimo([99,34,5,72]))
    #print(ordenados([1,3,5,1]))
    #print(ordenados2([1,3,5,6]))
    print(pos_maximo([2,5,3,77,4]))

