-- ej 2 --
esMultiploDe :: Int -> Int -> Bool
esMultiploDe x y | mod x y == 0 = True
                    | otherwise = False

digitoUnidades :: Integer -> Integer
digitoUnidades n = mod (abs n) 10

digitoDecenas :: Integer -> Integer
digitoDecenas n = mod (abs n) 10

-- ej 4 --
todoMenor :: (Float, Float) -> (Float, Float) -> Bool
todoMenor x y | (fst x) < (fst y) && (snd x) < (snd y) = True
              | otherwise = False

todoMenor2 :: (Float, Float) -> (Float, Float) -> Bool
todoMenor2 (a,b) (c,d) | a < c && b < d = True
                        | otherwise = False

todoMenor3 :: (Float, Float) -> (Float, Float) -> Bool
todoMenor3 (a,b) (c,d) = a < c && b < d

{-posPrimerPar: dada una terna de enteros, devuelve la posici´on del primer n´umero par si es que hay alguno, y devuelve
4 si son todos impares.-}

posPrimerPar :: (Int, Int, Int) -> Int
posPrimerPar (a, b, c) | mod a 2 == 0 = 1
                       | mod b 2 == 0 = 2
                       | mod c 2 == 0 = 3
                       | otherwise = 4

-- ej 7 --
absoluto :: Float -> Float
absoluto x | x >= 0 = x
           | x <= 0 = -x

distanciaManhattan:: (Float, Float, Float) -> (Float, Float, Float) -> Float
distanciaManhattan (p0, p1, p2) (q0, q1, q2) = absoluto (p0 - q0) + absoluto (p1 - q1) + absoluto (p2 - q2)

-- ej 8--
{-
problema comparar (a:Z, b:Z) : Z {
requiere: {True}
asegura: {(res = 1 ↔ sumaUltimosDosDigitos(a) < sumaUltimosDosDigitos(b))}
asegura: {(res = −1 ↔ sumaUltimosDosDigitos(a) > sumaUltimosDosDigitos(b))}
asegura: {(res = 0 ↔ sumaUltimosDosDigitos(a) = sumaUltimosDosDigitos(b))}
}
problema sumaUltimosDosDigitos (x: Z) : Z {
requiere: {True}
asegura: {res = (|x| mod 10) + (⌊(|x|/10)⌋ mod 10)}
}
-}

comparar :: Int -> Int -> Int
comparar  a b | sumaUltimosDosDigitos(a) < sumaUltimosDosDigitos(b) = 1
              | sumaUltimosDosDigitos(a) > sumaUltimosDosDigitos(b) = -1
              | otherwise = 0
        where 
        sumaUltimosDosDigitos :: Int -> Int
        sumaUltimosDosDigitos x = unidad(x) + decena(x)

        unidad :: Int -> Int
        unidad x = mod x 10
        
        decena :: Int -> Int
        decena x = unidad (div x 10)

